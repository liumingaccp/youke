<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:amq="http://activemq.apache.org/schema/core"
       xmlns:jms="http://www.springframework.org/schema/jms"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
                 http://www.springframework.org/schema/beans
                 http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
                 http://www.springframework.org/schema/context
                 http://www.springframework.org/schema/context/spring-context-4.1.xsd
                 http://www.springframework.org/schema/mvc
                 http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
                 http://www.springframework.org/schema/jms
                 http://www.springframework.org/schema/jms/spring-jms-4.1.xsd
                 http://activemq.apache.org/schema/core
                 http://activemq.apache.org/schema/core/activemq-core-5.12.1.xsd
                 http://www.springframework.org/schema/mvc
                 http://www.springframework.org/schema/mvc/spring-mvc.xsd
            ">
    <context:property-placeholder location="classpath:youke.properties" ignore-unresolvable="true"/>

    <mvc:annotation-driven/>

    <amq:connectionFactory id="amqConnectionFactory"
                           brokerURL="${activemq.amq.brokerURL}"
                           userName="${activemq.amq.userName}"
                           password="${activemq.amq.password}"
    />

    <bean id="connectionFactory" class="org.apache.activemq.spring.ActiveMQConnectionFactory">
        <property name="brokerURL" value="${activemq.amq.brokerURL}"/>
        <property name="userName" value="${activemq.amq.userName}"/>
        <property name="password" value="${activemq.amq.password}"/>
        <property name="useAsyncSend" value="true"/>
        <property name="trustAllPackages" value="true"/>
    </bean>
    <!-- 定义消息队列（Queue） -->
    <bean id="demoQueueDestination" class="org.apache.activemq.command.ActiveMQQueue">
        <!-- 设置消息队列的名字 -->
        <constructor-arg>
            <value>youke-service-mass-queue</value>
        </constructor-arg>
    </bean>

    <!-- Spring JmsTemplate 的消息生产者 start-->
    <!-- 定义JmsTemplate的Queue类型 -->
    <bean id="jmsQueueTemplate" class="org.springframework.jms.core.JmsTemplate">
        <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
        <constructor-arg ref="connectionFactory"/>
        <!-- 非pub/sub模型（发布/订阅），即队列模式 -->
        <property name="pubSubDomain" value="false"/>
    </bean>

    <!-- 定义JmsTemplate的Topic类型 -->
    <bean id="jmsTopicTemplate" class="org.springframework.jms.core.JmsTemplate">
        <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
        <constructor-arg ref="connectionFactory"/>
        <!-- pub/sub模型（发布/订阅） -->
        <property name="pubSubDomain" value="true"/>
    </bean>
    <!--Spring JmsTemplate 的消息生产者 end-->

    <!-- 定义Queue监听器 -->
    <jms:listener-container destination-type="queue" container-type="default" connection-factory="connectionFactory" acknowledge="client">
        <jms:listener destination="initCodeTemp.queue" ref="initCodeTempConsumer"/>
        <jms:listener destination="payFailMsg.queue" ref="payFailConsumer"/>
        <jms:listener destination="massSend.queue" ref="massSendConsumer"/>
    </jms:listener-container>

    <!-- 定义Topic监听器 -->
    <jms:listener-container destination-type="topic" container-type="default" connection-factory="connectionFactory" acknowledge="client">
    </jms:listener-container>
    <!-- 消息消费者 end -->
</beans>